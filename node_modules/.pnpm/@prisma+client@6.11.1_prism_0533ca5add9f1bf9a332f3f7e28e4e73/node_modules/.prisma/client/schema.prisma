// Prisma schema for EVM Wallet App

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(uuid())
  email               String             @unique
  password            String
  walletAddress       String             @unique
  encryptedPrivateKey String
  seedPhrase          String
  referralCode        String             @unique
  referredBy          String? // referralCode dari user lain
  createdAt           DateTime           @default(now())
  tokens              Token[]
  tasks               Task[]
  referralsSent       Referral[]         @relation("ReferralsSent")
  referralsReceived   Referral[]         @relation("ReferralsReceived")
  campaignProgress    CampaignProgress[]
  userXP              UserXP[]
}

model Token {
  id              String @id @default(uuid())
  symbol          String
  contractAddress String
  decimals        Int
  chain           String
  user            User   @relation(fields: [userId], references: [id])
  userId          String
}

model Task {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  taskNumber Int
  status     String // not_started, eligible, pending_admin, completed, rejected
  txHash     String?
  rewardSent Boolean  @default(false)
  updatedAt  DateTime @updatedAt
}

model Referral {
  id         String   @id @default(uuid())
  referrer   User     @relation("ReferralsSent", fields: [referrerId], references: [id])
  referrerId String
  referred   User     @relation("ReferralsReceived", fields: [referredId], references: [id])
  referredId String
  eligible   Boolean  @default(false)
  rewardSent Boolean  @default(false)
  updatedAt  DateTime @updatedAt
}

model AdminAction {
  id           String   @id @default(uuid())
  adminId      String
  actionType   String
  targetUserId String
  taskId       String?
  createdAt    DateTime @default(now())
}

model CampaignProgress {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  campaignId String
  chain      String
  progress   Int      @default(0)
  status     String // in_progress, completed, claimed
  updatedAt  DateTime @updatedAt
  season     String? // weekly/seasonal id
}

model UserXP {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  xp           Int      @default(0)
  level        Int      @default(1)
  lastActionAt DateTime @updatedAt
  season       String? // weekly/seasonal id
}
